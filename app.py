import pandas as pd
import streamlit as st
from io import BytesIO
import plotly.express as px
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='app.log',
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)

def log_action(action):
    user = st.session_state.get('user', 'unknown')
    logging.info(f"User: {user} - {action}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DAYS_IN_MONTH = 28
NORM_HOURS = 160
WORK_GROUPS = ['–ì–†1', '–ì–†2', '–ì–†3', '–ì–†4', '–æ—Ñ–∏—Å']

# –®–∞–±–ª–æ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
SCHEDULE_TEMPLATES = {
    '–ì—Ä–∞—Ñ–∏–∫1': [11.5, 11.5, "", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫2': [11.5, 7.5, "", "", 11.5, 11.5, "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫3': ["", 11.5, 11.5, "", "", "", 11.5, 11.5],
    '–ì—Ä–∞—Ñ–∏–∫4': ["", "", 11.5, 11.5, "", 11.5, 11.5],
    '–û—Ñ–∏—Å': [8, 8, 8, 8, 8]
}

class EmployeeSchedule:
    def __init__(self, name, group, schedule_type, exceptions=None, absences=None):
        self.name = name
        self.group = group
        self.schedule_type = schedule_type
        self.exceptions = exceptions or {}
        self.absences = absences or {}

    def generate_schedule(self):
        base_pattern = SCHEDULE_TEMPLATES[self.schedule_type]
        schedule = {}
        
        pattern_index = 0
        for day in range(1, DAYS_IN_MONTH+1):
            day_str = str(day)
            if day_str in self.exceptions:
                schedule[day_str] = self.exceptions[day_str]
            elif day_str in self.absences:
                schedule[day_str] = self.absences[day_str]
            else:
                schedule[day_str] = base_pattern[pattern_index % len(base_pattern)]
                pattern_index += 1
        
        total = sum(
            float(h) if isinstance(h, (int, float, str)) and str(h).replace('.', '').isdigit() 
            else 0 
            for h in schedule.values()
        )
        
        return {
            '–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã': self.name,
            '–ì–† ‚Ññ': self.group,
            **schedule,
            '–§–∞–∫—Ç –§–†–í': round(total, 1),
            '–æ—Ç –§–†–í': round(total - NORM_HOURS, 1)
        }

def create_schedule():
    employees = [
        EmployeeSchedule("–§–µ–æ–∫—Ç–∏—Å—Ç–æ–≤–∞ –ï.–ê.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û", '27': '4'}),
        EmployeeSchedule("–¢—Ä–µ—Ç—å—è–∫–æ–≤ –ê.–ò.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ì—Ä–∞—á–µ–≤–∞ –¢.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–ë–µ–ª–æ—É—Å–æ–≤ –ê.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'12': "–ì–û"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –°.–í.", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1"),
        EmployeeSchedule("–°–∞—Ä–∞–Ω—Ü–µ–≤ –ê.–ù. —É—á–µ–Ω–∏–∫", "–ì–†1", "–ì—Ä–∞—Ñ–∏–∫1", {'6': "—É–≤"}),
        EmployeeSchedule("–ü–∞–Ω—Ñ–∏–ª–æ–≤ –ê.–í.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'22': "–≥–æ"}),
        EmployeeSchedule("–°–≤–∏—Ä–∏–¥–æ–≤ –ê.–û. (—Å—Ç–∞–∂–µ—Ä)", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–º–∏—Ä–Ω–æ–≤ –ù.–ù.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–°–∏–Ω—è–∫–∏–Ω–∞ –°.–ê.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–ü–∞–Ω—Ç—é—Ö–∏–Ω –ê.–î.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2", {'23': "–≥–æ"}),
        EmployeeSchedule("–î–∞–≤—ã–¥–æ–≤–∞ –û.–ò.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–†–æ–º–µ–Ω—Å–∫–∏–π –†.–°.", "–ì–†2", "–ì—Ä–∞—Ñ–∏–∫2"),
        EmployeeSchedule("–õ—É–∫–∞—à–µ–Ω–∫–æ–≤–∞ –°.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),
        EmployeeSchedule("–†–∞–∫—É –û.–ê.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'8': "–±/–ª"}),
        EmployeeSchedule("–ú–∏—Ö–µ–µ–≤–∞ –ê.–í.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3", {'15': "–ì–û"}),
        EmployeeSchedule("–ê–Ω—Ç–∏–ø–µ–Ω–∫–æ –í.–ù.", "–ì–†3", "–ì—Ä–∞—Ñ–∏–∫3"),
        EmployeeSchedule("–Æ–¥–∏–Ω–∞ –ò.–ï.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–õ–∏—Å–æ–≤—Å–∫–∞—è –¢.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'4': "–±/–ª"}),
        EmployeeSchedule("–ì–∞–ª–∫–∏–Ω–∞ –í.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'11': "–±/–ª"}),
        EmployeeSchedule("–ù–µ–∑–±—É–¥–µ–µ–≤ –î.–°.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–°–º–æ–ª—è–∫–æ–≤ –ê.–ê.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4", {'12': "–ì–û"}),
        EmployeeSchedule("–î–æ–ª–≥–æ–∞—Ä—à–∏–Ω–Ω–Ω—ã—Ö –¢.–†.", "–ì–†4", "–ì—Ä–∞—Ñ–∏–∫4"),
        EmployeeSchedule("–ü–æ–¥–≥–æ—Ä–±—É–Ω—Å–∫–∏–π –î.–ê.", "–æ—Ñ–∏—Å", "–û—Ñ–∏—Å")
    ]
    
    return pd.DataFrame([e.generate_schedule() for e in employees])

def validate_data(df):
    errors = []
    valid_marks = ['', '–ì–û', '–±/–ª', '—É–≤', '–≥–æ']
    for idx, row in df.iterrows():
        for day in range(1, DAYS_IN_MONTH+1):
            value = row[str(day)]
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:
            if not (isinstance(value, (int, float)) and (str(value) not in valid_marks):
                errors.append(f"–û—à–∏–±–∫–∞: {row['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã']} –¥–µ–Ω—å {day} - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}'")
    return errors

def edit_data(df):
    edited_df = st.data_editor(
        df,
        num_rows="dynamic",
        use_container_width=True,
        column_config={
            "–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã": st.column_config.TextColumn(required=True),
            "–ì–† ‚Ññ": st.column_config.SelectboxColumn(options=WORK_GROUPS)
        },
        key="data_editor"
    )
    if not df.equals(edited_df):
        log_action("–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
    return edited_df

def main():
    st.set_page_config(layout="wide", page_title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞", page_icon="üìÖ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if 'schedule_data' not in st.session_state:
        st.session_state.schedule_data = create_schedule()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –ü–æ–∏—Å–∫
    search_query = st.sidebar.text_input("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_col = st.sidebar.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", st.session_state.schedule_data.columns)
    sort_order = st.sidebar.radio("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é"])
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    selected_groups = st.sidebar.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–∞–º", WORK_GROUPS)
    show_overtime = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = st.session_state.schedule_data
    if search_query:
        filtered_df = filtered_df[filtered_df['–§.–ò.–û. –º–∞—Å—Ç–µ—Ä–∞ —Å–º–µ–Ω—ã'].str.contains(search_query, case=False)]
    if selected_groups:
        filtered_df = filtered_df[filtered_df['–ì–† ‚Ññ'].isin(selected_groups)]
    if show_overtime:
        filtered_df = filtered_df[filtered_df['–æ—Ç –§–†–í'] > 0]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered_df = filtered_df.sort_values(
        by=sort_col, 
        ascending=sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã —Ü–µ—Ö–∞ –ú–∏–ñ –ì–õ–§")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.header("–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    edited_df = edit_data(filtered_df)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    errors = validate_data(edited_df)
    if errors:
        st.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for error in errors:
            st.write(f"‚ö†Ô∏è {error}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    tab1, tab2 = st.tabs(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"])
    
    with tab1:
        fig1 = px.histogram(
            edited_df, 
            x='–§–∞–∫—Ç –§–†–í',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤',
            nbins=20
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with tab2:
        group_stats = edited_df['–ì–† ‚Ññ'].value_counts().reset_index()
        fig2 = px.pie(
            group_stats, 
            values='count',
            names='–ì–† ‚Ññ',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º'
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", len(edited_df))
    with col2:
        avg_hours = edited_df['–§–∞–∫—Ç –§–†–í'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_hours:.1f} —á")
    with col3:
        overtime_count = len(edited_df[edited_df['–æ—Ç –§–†–í'] > 0])
        st.metric("–° –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π", f"{overtime_count} —á–µ–ª")
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.sidebar.header("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    export_format = st.sidebar.selectbox("–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", ["Excel", "CSV"])
    
    if st.sidebar.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        output = BytesIO()
        if export_format == "Excel":
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                edited_df.to_excel(writer, index=False)
            mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            file_ext = "xlsx"
        else:
            output.write(edited_df.to_csv(index=False).encode('utf-8'))
            mime_type = "text/csv"
            file_ext = "csv"
        
        st.sidebar.download_button(
            label=f"–°–∫–∞—á–∞—Ç—å {export_format}",
            data=output.getvalue(),
            file_name=f"–≥—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã_{datetime.now().strftime('%Y%m%d')}.{file_ext}",
            mime=mime_type
        )
        log_action(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {export_format}")

if __name__ == "__main__":
    main()